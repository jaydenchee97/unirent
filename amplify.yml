version: 1.0
frontend:
  phases:
    preBuild:
      commands:
        - npm install --quiet --global expo-cli
        - >
          if [ -f yarn.lock ]; then
            yarn
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install
          fi
        - echo "Downloading and installing Java 11"
        - wget https://download.bell-sw.com/java/11.0.18+10/bellsoft-jdk11.0.18+10-linux-amd64.tar.gz
        - tar -xzf bellsoft-jdk11.0.18+10-linux-amd64.tar.gz
        - export JAVA_HOME=$(pwd)/jdk-11.0.18
        - export PATH=$JAVA_HOME/bin:$PATH
        - java -version  # Verify the installation
        - echo "Downloading OWASP ZAP"
        - wget https://github.com/zaproxy/zaproxy/releases/download/v2.15.0/ZAP_2.15.0_Linux.tar.gz
        - tar -xzf ZAP_2.15.0_Linux.tar.gz
        - export ZAP_PATH=$(pwd)/ZAP_2.15.0
        - export PATH=$ZAP_PATH:$PATH

    build:
      commands:
        - echo "EXPO_PUBLIC_GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY" >> .env
        - npx expo export --platform web

    postBuild:
      commands:
        - echo "Running OWASP ZAP Scan"
        - $ZAP_PATH/zap.sh -daemon -port 8080 -config api.disablekey=true
        - zap-cli start --port 8080
        - zap-cli status --port 8080 --timeout 300
        - zap-cli spider http://localhost:8080
        - zap-cli active-scan http://localhost:8080
        - zap-cli report -o zap_report.html -f html
        - zap-cli shutdown

  artifacts:
    baseDirectory: dist
    files:
      - "**/*"
    zapReport:
      baseDirectory: .
      files:
        - zap_report.html

  cache:
    paths:
      - node_modules/**/*
      - $(npm root --global)/**/*
